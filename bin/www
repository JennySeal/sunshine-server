
const app = require('./../app.js');
const debug = require('debug')('server:server');
const http = require('http');
const localPort = 5500;
const PORT = process.env.PORT || localPort;

app.set('port', PORT);

const server = http.createServer(app);

server.listen(PORT, () => {
  console.log(`Hi Jenny, I'm listening on ${PORT}`);
});

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    return val;
  }

  if (PORT >= 0) {
    // port number
    return PORT;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}